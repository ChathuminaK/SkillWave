{
  "info": {
    "_postman_id": "7a95fd63-e8fc-4a1d-b2e1-39fb7d23e1ad",
    "name": "SkillWave Authentication",
    "description": "Collection of requests to test the authentication flow in SkillWave, including handling invalid sessions.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Register New User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test.user@example.com\",\n    \"password\": \"securePassword123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/register",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "auth",
            "register"
          ]
        },
        "description": "Register a new user account and receive authentication tokens"
      },
      "response": []
    },
    {
      "name": "Login",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"test.user@example.com\",\n    \"password\": \"securePassword123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "auth",
            "login"
          ]
        },
        "description": "Authenticate with email and password to get access and refresh tokens"
      },
      "response": []
    },
    {
      "name": "Get Current User",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/auth/current-user",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "auth",
            "current-user"
          ]
        },
        "description": "Get the current authenticated user's profile"
      },
      "response": []
    },
    {
      "name": "Refresh Token",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/refresh-token",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "auth",
            "refresh-token"
          ]
        },
        "description": "Get a new access token using the refresh token"
      },
      "response": []
    },
    {
      "name": "Logout",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/auth/logout",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "auth",
            "logout"
          ]
        },
        "description": "Log out the current user and invalidate the session"
      },
      "response": []
    },
    {
      "name": "Invalid Session Example",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Cookie",
            "value": "JSESSIONID=2DD7BA946346BF3C9663C7B632BDBA36"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/users/me",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "users",
            "me"
          ]
        },
        "description": "This request shows the scenario from the logs where an invalid session ID was used"
      },
      "response": []
    },
    {
      "name": "User Profile",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/users/me",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "users",
            "me"
          ]
        },
        "description": "Get the user's full profile information"
      },
      "response": []
    },
    {
      "name": "Update User Profile",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Updated Name\",\n    \"bio\": \"This is my updated profile bio\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/users/me",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "api",
            "users",
            "me"
          ]
        },
        "description": "Update the current user's profile information"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-store tokens from login and refresh responses",
          "if (pm.response.code === 200) {",
          "    const responseJson = pm.response.json();",
          "    if (responseJson.accessToken) {",
          "        pm.environment.set(\"accessToken\", responseJson.accessToken);",
          "        console.log(\"Access token saved to environment\");",
          "    }",
          "    if (responseJson.refreshToken) {",
          "        pm.environment.set(\"refreshToken\", responseJson.refreshToken);",
          "        console.log(\"Refresh token saved to environment\");",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}
